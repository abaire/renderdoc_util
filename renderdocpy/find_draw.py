# RenderDoc Python console, powered by python 3.9.7.
# The 'pyrenderdoc' object is the current CaptureContext instance.
# The 'renderdoc' and 'qrenderdoc' modules are available.
# Documentation is available: https://renderdoc.org/docs/python_api/index.html

from contextlib import redirect_stdout
import os

context = pyrenderdoc
replay_manager = context.Replay()


def _find_surface(action, pipeline):
    fb = pipeline.framebuffer
    if not fb:
        return
    draw_fbo = fb.drawFBO
    if not draw_fbo:
        return

    for index, resource in enumerate(draw_fbo.colorAttachments):
        resource_id = resource.resourceId
        if resource_id == renderdoc.ResourceId.Null():
            continue
        rd = pyrenderdoc.GetResource(resource_id)
        if rd.autogeneratedName:
            continue
        print(f"EID {action.eventId} writes color to {rd.name}")

    depth = draw_fbo.depthAttachment
    if depth:
        resource_id = depth.resourceId
        if resource_id != renderdoc.ResourceId.Null():
            rd = pyrenderdoc.GetResource(resource_id)
            if not rd.autogeneratedName:
                print(f"EID {action.eventId} writes depth to {rd.name}")

    psh = pipeline.fragmentShader
    bindpoint_mapping = psh.bindpointMapping

    ro_inputs = bindpoint_mapping.readOnlyResources
    rw_inputs = bindpoint_mapping.readWriteResources

    def _print_textures(resources):
        for resource in resources:
            if not resource.isTexture:
                continue

            bindpoint_array = ro_inputs if resource.isReadOnly else rw_inputs
            bindpoint = bindpoint_array[resource.bindPoint]
            if not bindpoint.used:
                continue
            texture = pipeline.textures[resource.bindPoint]
            resource_id = texture.resourceId

            rd = pyrenderdoc.GetResource(resource_id)
            if rd.autogeneratedName:
                continue
            print(
                f"EID {action.eventId} uses {rd.name} in sampler {resource.bindPoint}"
            )

    _print_textures(psh.reflection.readOnlyResources)
    _print_textures(psh.reflection.readWriteResources)

    print("")


def iterate_draw_actions(action):
    while action:
        if action.flags & renderdoc.ActionFlags.Drawcall:
            yield action
        action = action.next


def find_surface():
    current_filename = os.path.basename(context.GetCaptureFilename())

    output = os.path.expanduser(f"~/Desktop/{current_filename}_surfaces.txt")
    with open(output, "w", encoding="utf-8") as out_file:
        with redirect_stdout(out_file):
            for action in iterate_draw_actions(context.CurRootActions()[0]):
                if not action.flags & renderdoc.ActionFlags.Drawcall:
                    action = action.next
                    continue
                context.SetEventID([], action.eventId, action.eventId, False)
                pipeline = context.CurGLPipelineState()
                if not pipeline:
                    action = action.next
                    continue

                _find_surface(action, pipeline)
                action = action.next


find_surface()
